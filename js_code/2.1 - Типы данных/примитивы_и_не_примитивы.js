// JavaScript позволяет нам работать с примитивными типами данных – строками, числами и т.д., как будто они являются объектами. 
// У них есть и методы, но примитивы – не объекты.

// Примитивы - string, number, bigint, boolean, symbol, null, undefined
// Особенные примитивы null и undefined являются исключениями. У них нет соответствующих «объектов-обёрток», и они не имеют никаких методов. 
// В некотором смысле, они «самые примитивные».

// При обращении к методы примитива создаётся специальный «объект-обёртка», который предоставляет нужную функциональность, а после удаляется.
let str = 'Hello';
console.log(str.toLocaleUpperCase());
/*
1. Строка str – примитив. В момент обращения к его свойству, создаётся специальный объект, который знает значение строки и имеет такие полезные методы, как toUpperCase().
2. Этот метод запускается и возвращает новую строку (показывается в console.log).
3. Специальный объект удаляется, оставляя только примитив str.
*/

// Можно создать объект-обертку для примитивов при помощи new - но очень не рекомендуется. В некоторых местах последствия могут быть катастрофическими.
let num = 0;
let constructorNumber = new Number(0);

console.log(typeof(num));               // number
console.log(typeof(constructorNumber)); // object

if (num) console.log('Will never execute since 0 is false');
if (constructorNumber) console.log('Will execute since object is true');



// Объекты - object, array, map, set, functions - Может хранить множество значений как свойства.


