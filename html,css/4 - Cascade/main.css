/* CSS stands for Cascading Stylesheets. The cascade is the algorithm for solving conflicts where multiple CSS rules apply to an HTML element */


/* POSITION AND ORDER OF APPEARANCE */

/* 
The order in which your CSS rules appear and how they appear is taken into consideration by the cascade while it calculates conflict resolution.
*/

/* В данном примере применится цвет brown, так как он расположен ниже */
/* Тоже касается порядка в каком они вызываются в HTML используя тэг link, style - чем ниже, тем главнее */
div.order_of_appearance {
    color: blue;
}
div.order_of_appearance {
    color: brown;
}

/* Применится brown, так как он ниже */
div.order_of_property {
    background-color: blue;
    background-color: brown;
}
/* 
Being able to specify two values for the same property can be a simple way to create fallbacks for browsers that do not support a particular value. 
In this next example, font-size is declared twice. If clamp() is supported in the browser, then the previous font-size declaration will be discarded. 
If clamp() isn't supported by the browser, the initial declaration will be honored, and the font-size will be 1.5rem
*/
div.order_of_property_clam {
    font-size: 1.5rem;
    font-size: clamp(1.5rem, 1rem + 3vw, 2rem);
}

.green {
    color: green;
}
.blue {
    color: blue;
}

/* SPECIFICITY */

/* 
Specificity is an algorithm which determines which CSS selector is the most specific, using a weighting or scoring system to make those calculations. 
By making a rule more specific, you can cause it to be applied even if some other CSS that matches the selector appears later in the CSS. 
*/

/* В данном случае применится brown, хоть он и самый высокий. Дело в том, что если у элемента p будет id="some_id" и class="some_class", то приоритет таков id->class->tag */
#some_id {
    color: brown
}

.some_class {
    color: blue;
}

p {
    color:aquamarine;
}

/* 
Each type of selector is awarded points which indicate how specific it is, the points for all of the selectors you have used to target an element are added together. 
This means that if you target an element with a selector list such as a.my-class.another-class[href]:hover you get something quite hard to overwrite with other CSS.
For this reason, and to help make your CSS more reusable, it's a good idea to keep your selectors as simple as possible. 
Use specificity as a tool to get at elements when you need to, but always consider refactoring long, specific selector lists, if you can.
*/

/* * {} - A universal selector (*) has no specificity and gets 0 points. This means that any rule with 1 or more points will override it */
* {
    margin: 0;
}

/* An element (type) or pseudo-element selector gets 1 point of specificity . */

a {
    cursor: pointer;
}

li::marker {
    color: red;
}

/* A class, pseudo-class or attribute selector gets 10 points of specificity */
.another_class {
    font-size: 1rem;
}

div:hover {
    color: red;
}

[href^='https'] {
    color: red;
}
/* The :not() pseudo-class itself adds nothing to the specificity calculation. However, the selectors passed in as arguments do get added to the specificity calculation.
   That selector would have 11 points */
div:not(.my_class) {
    padding: 10px;
}


/* id selector gets 100 points of specificity, as long as you use an ID selector (#myID) and not an attribute selector ([id="myID"]). */
#my_id {
    border-radius: 50%;
}


/* an !important at the end of a CSS value gets a specificity score of 10,000 points */
/* An !important rule is applied to a CSS property, so everything in the overall rule (selector and properties) does not get the same specificity score. */
.my_class {
    color: red !important;
}


/* Selector points are added up a - tag (1) + .awesome - class (10) + .cool - class (10) + href - attribute (10) + :hover - pseudo-class (10) = 41 */
a.awesome.cool[href]:hover {
    color: beige
}

/* id, class, tag */
/* Например идентификатор #some_id #another_id будет иметь значениие 2,0,0 - так как у него 2 id и нет классов и тэгов */
/* body header.page-header hl - 0,1,3 - так как у него 3 тэга (body, header, h1) и 1 класс (.page-header) */





/* ORIGIN */

/* 
The CSS that you write isn't the only CSS applied to a page. The cascade takes into account the origin of the CSS. 
This origin includes the browser's internal stylesheet, styles added by browser extensions or the operating system, and your authored CSS. 
The order of specificity of these origins, from least specific, to most specific is as follows:

1. User agent base styles. These are the styles that your browser applies to HTML elements by default.
2. Local user styles. These can come from the operating system level, such as a base font size, or a preference of reduced motion. They can also come from browser extensions, such as a browser extension that allows a user to write their own custom CSS for a webpage.
3. Authored CSS. The CSS that you author.
4. Authored !important. Any !important that you add to your authored declarations.
5. Local user styles !important. Any !important that come from the operating system level, or browser extension level CSS.
6. User agent !important. Any !important that are defined in the default CSS, provided by the browser.
*/


/* IMPORTANCE */

/* 
Not all CSS rules are calculated the same as each other, or given the same specificity as each other.

The order of importance, from least important, to most important is as follows:

1. normal rule type, such as font-size, background or color
2. animation rule type
3. !important rule type (following the same order as origin)
4. transition rule type
*/





